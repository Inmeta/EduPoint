/// <reference types="core-js" />
import { TypedHash } from "../../collections/collections";
import { Queryable, QueryableCollection, QueryableInstance } from "./queryable";
/**
 * Describes a collection of content types
 *
 */
export declare class ContentTypes extends QueryableCollection {
    /**
     * Creates a new instance of the ContentTypes class
     *
     * @param baseUrl The url or Queryable which forms the parent of this content types collection
     */
    constructor(baseUrl: string | Queryable, path?: string);
    /**
     * Gets a ContentType by content type id
     */
    getById(id: string): ContentType;
    /**
     * Adds an existing contenttype to a content type collection
     *
     * @param contentTypeId in the following format, for example: 0x010102
     */
    addAvailableContentType(contentTypeId: string): Promise<ContentTypeAddResult>;
    /**
     * Adds a new content type to the collection
     *
     * @param id The desired content type id for the new content type (also determines the parent content type)
     * @param name The name of the content type
     * @param description The description of the content type
     * @param group The group in which to add the content type
     * @param additionalSettings Any additional settings to provide when creating the content type
     *
     */
    add(id: string, name: string, description?: string, group?: string, additionalSettings?: TypedHash<string | number | boolean>): Promise<ContentTypeAddResult>;
}
/**
 * Describes a single ContentType instance
 *
 */
export declare class ContentType extends QueryableInstance {
    /**
     * Creates a new instance of the ContentType class
     *
     * @param baseUrl The url or Queryable which forms the parent of this content type instance
     */
    constructor(baseUrl: string | Queryable, path?: string);
    /**
     * Gets the column (also known as field) references in the content type.
    */
    readonly fieldLinks: Queryable;
    /**
     * Gets a value that specifies the collection of fields for the content type.
     */
    readonly fields: Queryable;
    /**
     * Gets the parent content type of the content type.
     */
    readonly parent: ContentType;
    /**
     * Gets a value that specifies the collection of workflow associations for the content type.
     */
    readonly workflowAssociations: Queryable;
}
export interface ContentTypeAddResult {
    contentType: ContentType;
    data: any;
}
