"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var queryable_1 = require("./queryable");
/**
 * Describes a collection of webhook subscriptions
 *
 */
var Subscriptions = (function (_super) {
    __extends(Subscriptions, _super);
    /**
     * Creates a new instance of the Subscriptions class
     *
     * @param baseUrl - The url or Queryable which forms the parent of this webhook subscriptions collection
     */
    function Subscriptions(baseUrl, path) {
        if (path === void 0) { path = "subscriptions"; }
        _super.call(this, baseUrl, path);
    }
    /**
     * Returns all the webhook subscriptions or the specified webhook subscription
     *
     */
    Subscriptions.prototype.getById = function (subscriptionId) {
        var subscription = new Subscription(this);
        subscription.concat("('" + subscriptionId + "')");
        return subscription;
    };
    /**
     * Create a new webhook subscription
     *
     */
    Subscriptions.prototype.add = function (notificationUrl, expirationDate, clientState) {
        var _this = this;
        var postBody = JSON.stringify({
            "resource": this.toUrl(),
            "notificationUrl": notificationUrl,
            "expirationDateTime": expirationDate,
            "clientState": clientState || "pnp-js-core-subscription",
        });
        return this.post({ body: postBody, headers: { "Content-Type": "application/json" } }).then(function (result) {
            return { data: result, subscription: _this.getById(result.id) };
        });
    };
    return Subscriptions;
}(queryable_1.QueryableCollection));
exports.Subscriptions = Subscriptions;
/**
 * Describes a single webhook subscription instance
 *
 */
var Subscription = (function (_super) {
    __extends(Subscription, _super);
    /**
     * Creates a new instance of the Subscription class
     *
     * @param baseUrl - The url or Queryable which forms the parent of this webhook subscription instance
     */
    function Subscription(baseUrl, path) {
        _super.call(this, baseUrl, path);
    }
    /**
     * Update a webhook subscription
     *
     */
    Subscription.prototype.update = function (expirationDate) {
        var _this = this;
        var postBody = JSON.stringify({
            "expirationDateTime": expirationDate,
        });
        return this.patch({ body: postBody, headers: { "Content-Type": "application/json" } }).then(function (data) {
            return { data: data, subscription: _this };
        });
    };
    /**
     * Remove a webhook subscription
     *
     */
    Subscription.prototype.delete = function () {
        return _super.prototype.delete.call(this);
    };
    return Subscription;
}(queryable_1.QueryableInstance));
exports.Subscription = Subscription;
